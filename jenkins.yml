---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Jenkins CodeDeploy: This template creates the IAM Roles, Jenkins server
  and CodeDeploy instances to demonstrate the setup of the CodeDeploy Jenkins plugin.
  **WARNING** This template creates one or more Amazon EC2 instances. You will be
  billed for the AWS resources used if you create a stack from this template. Copyright
  [2015-2016] Amazon.com, Inc. or its affiliates. All Rights Reserved. Licensed under
  the Apache License, Version 2.0 (the "License"). You may not use this file except
  in compliance with the License. A copy of the License is located at http://aws.amazon.com/apache2.0/
  or in the "license" file accompanying this file. This file is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and limitations
  under the License.'
Parameters:
  InstanceType:
    Description: EC2 instance type for Jenkins and CodeDeploy Web Servers
    Type: String
    Default: t2.medium
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceCount:
    Description: Number of CodeDeploy Web Server EC2 instances
    Type: Number
    Default: '3'
    ConstraintDescription: Must be a number between 2 and 4.
    MinValue: '2'
    MaxValue: '4'
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VpcId:
    Description: The VPC Id where the EC2 instances will be launched.
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be the name of an existing VPC.
  YourIPRange:
    Description: CIDR block of the network from where you will connect to the Jenkins
      server using HTTP and SSH
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet1:
    Description: The first public subnet where the Jenkins EC2 instance, ELB and CodeDeploy
      Web Servers will be launched
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: Must be a valid Public VPC Subnet.
  PublicSubnet2:
    Description: The second public subnet where the ELB and CodeDeploy Web Servers
      will be launched
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: Must be a valid Public VPC Subnet.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-1ccae774
      HVM64: ami-1ecae776
    us-west-2:
      PV64: ami-ff527ecf
      HVM64: ami-e7527ed7
    us-west-1:
      PV64: ami-d514f291
      HVM64: ami-d114f295
    eu-west-1:
      PV64: ami-bf0897c8
      HVM64: ami-a10897d6
    eu-central-1:
      PV64: ami-ac221fb1
      HVM64: ami-a8221fb5
    ap-northeast-1:
      PV64: ami-acd9e8fe
      HVM64: ami-68d8e93a
    ap-southeast-1:
      PV64: ami-27f90e27
      HVM64: ami-cbf90ecb
    ap-southeast-2:
      PV64: ami-ff9cecc5
      HVM64: ami-fd9cecc7
    sa-east-1:
      PV64: ami-fd9925e0
      HVM64: ami-b52890a8
Resources:
  JenkinsServer:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install Jenkins, nginx and the Jenkins CodeDeploy plugin
      AWS::CloudFormation::Init:
        configSets:
          install_all:
          - install_base
          - install_nginx
        install_base:
          packages:
            yum:
              git: []
        install_nginx:
          packages:
            yum:
              nginx: []
          files:
            "/etc/nginx/nginx.conf":
              content:
                Fn::Join:
                - ''
                - - 'user  nginx;

'
                  - "worker_processes  1;\n\n"
                  - 'error_log  /var/log/nginx/error.log;

'
                  - "pid        /var/run/nginx.pid;\n\n"
                  - 'events {

'
                  - "    worker_connections  1024;\n"
                  - "}\n\n"
                  - 'http {

'
                  - "    include       /etc/nginx/mime.types;\n"
                  - "    default_type  application/octet-stream;\n"
                  - '    log_format  main  ''$remote_addr - $remote_user [$time_local]
                    "$request" ''

'
                  - '                      ''$status $body_bytes_sent "$http_referer"
                    ''

'
                  - "                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n"
                  - "    access_log  /var/log/nginx/access.log  main;\n"
                  - "    sendfile        on;\n"
                  - "    keepalive_timeout  65;\n"
                  - "    include /etc/nginx/conf.d/*.conf;\n"
                  - "    index   index.html index.htm;\n"
                  - "    server {\n"
                  - "        listen       80;\n"
                  - "        server_name  _;\n"
                  - "        location / {\n"
                  - "          proxy_pass              http://127.0.0.1:8080;\n"
                  - "          proxy_set_header        Host $host;\n"
                  - "          proxy_set_header        X-Real-IP $remote_addr;\n"
                  - "          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n"
                  - "          proxy_connect_timeout   150;\n"
                  - "          proxy_send_timeout      100;\n"
                  - "          proxy_read_timeout      100;\n"
                  - "          proxy_buffers           4 32k;\n"
                  - "          client_max_body_size    8m;\n"
                  - "          client_body_buffer_size 128k;\n"
                  - "        }\n"
                  - "   }\n"
                  - "}\n"
              mode: '000444'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/nginx/nginx.conf"
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - Ref: JenkinsSecurityGroup
        SubnetId:
          Ref: PublicSubnet1
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: JenkinsInstanceProfile
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - 'yum update -y aws-cfn-bootstrap

'
            - "/opt/aws/bin/cfn-init -v "
            - " --stack "
            - Ref: AWS::StackName
            - " --resource JenkinsServer "
            - " --configsets install_all "
            - " --region "
            - Ref: AWS::Region
            - "\n"
            - "# Install Jenkins\n"
            - 'wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo

'
            - 'rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key

'
            - 'yum install -y jenkins

'
            - 'service jenkins start

'
            - 'chkconfig jenkins on

'
            - "# Update the AWS CLI to the latest version\n"
            - 'yum update -y aws-cli

'
            - "# Wait 30 seconds to allow Jenkins to startup\n"
            - 'echo "Waiting 30 seconds for Jenkins to start....."

'
            - 'sleep 30

'
            - "# Install the required plugins\n"
            - 'cd /var/lib/jenkins/plugins

'
            - 'curl -O -L https://updates.jenkins-ci.org/latest/multiple-scms.hpi

'
            - 'curl -O -L https://updates.jenkins-ci.org/latest/github-api.hpi

'
            - 'curl -O -L https://updates.jenkins-ci.org/latest/scm-api.hpi

'
            - 'curl -O -L https://updates.jenkins-ci.org/latest/git-client.hpi

'
            - 'curl -O -L https://updates.jenkins-ci.org/latest/github.hpi

'
            - 'curl -O -L https://updates.jenkins-ci.org/latest/git.hpi

'
            - 'curl -O -L https://updates.jenkins-ci.org/latest/codedeploy.hpi

'
            - 'chown jenkins:jenkins *.hpi

'
            - "# Restarting Jenkins\n"
            - 'service jenkins restart

'
            - "# Configure AWS CLI and GIT for jenkins user\n"
            - "su - jenkins --shell /bin/bash -c \"aws configure set region us-east-1\"
              \n"
            - "su - jenkins --shell /bin/bash -c \"aws configure set output json\"
              \n"
            - "su - jenkins --shell /bin/bash -c \"git config --global credential.helper
              '!aws codecommit credential-helper $@'\" \n"
            - "su - jenkins --shell /bin/bash -c \"git config --global credential.useHttpPath
              true\" \n"
            - "su - jenkins --shell /bin/bash -c \"git config --global user.email
              'jenkins@mycompany.com'\" \n"
            - "su - jenkins --shell /bin/bash -c \"git config --global user.name 'MyJenkinsServer'
              \" \n"
      Tags:
      - Key: Name
        Value: Jenkins Server
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access from specific CIDR block
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: YourIPRange
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp:
          Ref: YourIPRange
  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access from anywhere
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
  WSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access from ELB
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: YourIPRange
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          Ref: ELBSG
  CodeDeployBucket:
    Type: AWS::S3::Bucket
  JenkinsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSCodeCommitReadOnly
      - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
  JenkinsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: JenkinsRole
  JenkinsCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ":root"
          Action:
          - sts:AssumeRole
  STSAssumeRoleJenkinsCodeDeployRole:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: STSAssumeRole_JenkinsCodeDeployRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Resource:
          - Fn::GetAtt:
            - JenkinsCodeDeployRole
            - Arn
      Roles:
      - Ref: JenkinsRole
  S3AllCodeDeploy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3All_CodeDeploy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:*
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: CodeDeployBucket
              - "/*"
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: CodeDeployBucket
        - Effect: Allow
          Action:
          - s3:GetBucketLocation
          - s3:ListAllMyBuckets
          Resource: "*"
      Roles:
      - Ref: JenkinsCodeDeployRole
  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: '1'
          Effect: Allow
          Principal:
            Service: codedeploy.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource:
          - "*"
          Action:
          - ec2:Describe*
        - Effect: Allow
          Resource:
          - "*"
          Action:
          - autoscaling:CompleteLifecycleAction
          - autoscaling:DeleteLifecycleHook
          - autoscaling:DescribeLifecycleHooks
          - autoscaling:DescribeAutoScalingGroups
          - autoscaling:PutLifecycleHook
          - autoscaling:RecordLifecycleActionHeartbeat
        - Effect: Allow
          Resource:
          - "*"
          Action:
          - Tag:getResources
          - Tag:getTags
          - Tag:getTagsForResource
          - Tag:getTagsForResourceList
      Roles:
      - Ref: CodeDeployTrustRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - autoscaling:Describe*
          - cloudformation:Describe*
          - cloudformation:GetTemplate
          - s3:Get*
          Resource: "*"
      Roles:
      - Ref: InstanceRole
  InstanceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceRole
  WSASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: WSLaunchConfiguration
      VPCZoneIdentifier:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      MinSize: 0
      MaxSize: 4
      DesiredCapacity:
        Ref: InstanceCount
      LoadBalancerNames:
      - Ref: ELB
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      Tags:
      - Key: Name
        Value: CodeDeployDemo
        PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count:
          Ref: InstanceCount
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '0'
        MaxBatchSize: '1'
  WSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: WSSG
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -ex\n"
            - 'yum update -y aws-cfn-bootstrap

'
            - 'yum install -y aws-cli

'
            - "# Helper function.\n"
            - 'function error_exit

'
            - "{\n"
            - "  /opt/aws/bin/cfn-signal -e 1 "
            - "         --stack "
            - Ref: AWS::StackName
            - '         --reason "$1" '
            - "         --resource WebServerInstance "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
            - "  exit 1\n"
            - "}\n"
            - "# Install the AWS CodeDeploy Agent.\n"
            - 'cd /home/ec2-user/

'
            - aws s3 cp 's3://aws-codedeploy-
            - Ref: AWS::Region
            - "/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download
              AWS CodeDeploy Agent.'\n"
            - "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to
              install AWS CodeDeploy Agent.' \n"
            - "/opt/aws/bin/cfn-init --stack "
            - Ref: AWS::StackId
            - " --resource WSLaunchConfiguration --region "
            - Ref: AWS::Region
            - " || error_exit 'Failed to run cfn-init.'\n"
            - "# Signal the status from cfn-init\n"
            - "/opt/aws/bin/cfn-signal -e 0 "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource WSASG "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
      KeyName:
        Ref: KeyName
      IamInstanceProfile:
        Ref: InstanceRoleInstanceProfile
      AssociatePublicIpAddress: true
  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: HTTP:80/
        Timeout: '5'
        UnhealthyThreshold: '5'
      Listeners:
      - InstancePort: '80'
        LoadBalancerPort: '80'
        Protocol: HTTP
        InstanceProtocol: HTTP
        PolicyNames: []
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroups:
      - Ref: ELBSG
  DemoApplication:
    Type: AWS::CodeDeploy::Application
  DemoFleet:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Ref: DemoApplication
      AutoScalingGroups:
      - Ref: WSASG
      Deployment:
        Description: Initial deployment
        Revision:
          RevisionType: S3
          S3Location:
            Bucket:
              Fn::Join:
              - ''
              - - aws-codedeploy-
                - Ref: AWS::Region
            BundleType: zip
            Key: samples/latest/SampleApp_Linux.zip
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      ServiceRoleArn:
        Fn::GetAtt:
        - CodeDeployTrustRole
        - Arn
Outputs:
  ELBDNSName:
    Description: DNS Name of the ELB
    Value:
      Fn::GetAtt:
      - ELB
      - DNSName
  JenkinsServerDNSName:
    Description: DNS Name of Jenkins Server
    Value:
      Fn::GetAtt:
      - JenkinsServer
      - PublicDnsName
  CodeDeployApplicationName:
    Description: CodeDeploy Application Name
    Value:
      Ref: DemoApplication
  CodeDeployDeploymentGroup:
    Description: CodeDeploy Deployment Group Name
    Value:
      Ref: DemoFleet
  S3BucketName:
    Description: S3 Bucket Name
    Value:
      Ref: CodeDeployBucket
  JenkinsCodeDeployRoleArn:
    Description: ARN of the JenkinsCodeDeploy Role
    Value:
      Fn::GetAtt:
      - JenkinsCodeDeployRole
      - Arn
